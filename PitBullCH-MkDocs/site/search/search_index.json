{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"about/","text":"PitBullCH @ KruptosNomisma.org","title":"About"},{"location":"about/#pitbullch-kruptosnomismaorg","text":"","title":"PitBullCH @ KruptosNomisma.org"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/","text":"Kruptos Nomisma presents... Introduction This guide assumes a few important things about your VPS: You are using Contabo as your VPS provider \u2013 if using another provider there may be subtle differences in terms of what is or is not already installed ! Instructions intended to be run on a certain platform will be preceded with the following words: On Mac - this is for running on Mac only On Windows - this is for running on Windows only On Mac / Windows - this is for running on Mac or Windows (as appropriate for your situation) On VPS - this is for running on VPS only You will access your VPS over a command-line terminal: On Mac this would be the default Terminal app, or better, the 3rd-party iTerm2 app On Windows this would be the default Command Prompt or PowerShell, or perhaps, the 3rd-party Putty app You understand that Partisia node logs on the VPS will use the UTC time-zone for timestamps and thus log times may be some hours in front of or behind your own local time \u2013 this is because time under UTC never changes through daylight savings time so gives full consistency and continuity I will use yourUsername and yourGroupname in my examples - you will need to replace these appropriately with your own values This guide assumes a few important things about you and Linux: You are using the Linux Ubuntu distro v20.04 (not earlier) \u2013 other distros will work, but there may be subtle differences which you will have to work out yourself ! You may not have too much Unix / Linux experience and you may find some part of this guide a little daunting, but you are NOT afraid to make mistakes and start all over again, and you are NOT afraid to ask questions You should ideally be familiar with one of the usual Unix / Linux command-line editors \u2013 I have used nano in all examples as it is more intuitive and user friendly, but please feel free to use vi if you are more comfortable with that A few important words on security: Store your most critical & private items relating to a blockchain node securely & safely \u2013 preferably in a password manager (1Password, Bitwarden, KeePassXC all recommended) \u2013 means wallet private keys, login passwords (root and non-root) and SSH keys: Store with them your node wallet address & VPS IP address because you will need these - keeping them together makes it easier later Store the emergency VPS VNC IP address, username, and password from your VPS provider \u2013 you may need them if things go wrong SSH is critical for the security of your VPS - do not skip the setup of this One final thing: although I am experienced on node setups, I do not consider myself an expert \u2013 there are thousands of people with more clue than I, and probably similar Partisia node setup guides which are much more comprehensive than this \u2013 but this one does the job for me ;-) Intro over \u2013 now let us get down to the good stuff, and in the words of the late, great Douglas Adams: Don\u2019t Panic ! Sign Testnet Agreement Signing the Testnet Agreemnet is a pre-requisite to getting access to the Partisia GitLab repository: without this the node cannot function - so DM @bryanpartisia in Discord with the following information and asking for the Testnet Agreement: Full Name as stated on the official ID that you used for KYC Email Address that you used for KYC Residential Address that you used for KYC You will receive the Testnet Agreement via the HelloSign facility - the email will be from Partisia Blockchain ( noreply@mail.hellosign.com ) - review this carefully and sign it, it will be send back to Partisia automatically. The email looks like this: You will then receive via the HelloSign facility a copy of the signed agreement - again the email will be from HelloSign ( noreply@mail.hellosign.com ) - make sure to story this safely. The email looks like this: Node Operator Survey Within a day or two of the above, you will receive via email an invite from Peter Frandsen to undertake a Node Operator Survey - the email will be from Node Vetting ( partisia-xxxxxxxxx@survey.au.dk - where xxxxxxxxx is a random number) and this survey is critical as it is used to inform Partisia regarding your public addresses & keys). The email looks like this: Note: the 12-character Survey Key in the email is unique to you, and must not be shared with others - this is critical as any leakage could result in your node being compromised Node Operator Survey - Page 1 For the first page of the Survey you only need to fill in the USD value of your Partisia investment, and indicate your level of experise with respect to operating blockchain node: Hit naeste (next) to continue... Note: Do not be too worried about your level of technical expertise - as long as you have the aptitude and willingness to learn, the Discord-based Node Operator community will be there to help you ! Node Operator Survey - Page 2 For the second page of the Survey I would advise to answer the same as below, other than adjusting your answer for the second question depending on your own circumstances: Hit naeste (next) to continue... Generate Keys & Addresses Before filling in the next page, in another browser window go the key generator website to generate the various required sets of keys & addresses: https://dashboard.partisiablockchain.com/keygen It will look like this (FYI the keys you see here were discarded, they were never used): There are two sections: Upper section comprises a private / public keypair plus the associated blockchain address Lower section comprises just a BLS Producer private / public keypair Each time you hit the Generate button, it generates new entries in both sections. Note however that the upper and lower sections are completely independent of each other, so you could take the entries from one of the sections now, hit Generate as many times as you like then take the entries from the other section - and that is perfectly fine ! In total you need three sets of entries from the upper section, and one from the lower section - as follows: For the first set (from the upper section ): If you are still confident that the keypair / address from your KYC / Sale keygen session are secure and valid then you can use these... Otherwise generate now a new set (in this case, you will need to inform @bryanpartisia before TGE about the new blockchain address) Regardless: you have a KYC / Sale private key (key #1), KYC / Sale public key (key #2), and KYC / Sale blockchain address (address #3) Then for the second set (from the upper section ): You could use the keypair / address from your Test-Net Baker node if you have them (though I would advise to keep those purely for Test-net activities)... Otherwise generate now a new set Regardless: you have a Block Producer private key (key #4), Block Producer public key (key #5), and Block Producer blockchain address (address #6) Then for the third set (from the upper section ): You probably don't already have any existing ones to use for this, so just generate a new set You now have a Node Operator private key (key #7), Node Operator public key (key #8), and Node Operator blockchain address (address #9) Finally for the fourth set (from the lower section ): You don't already have any existing ones to use for this, so just generate a new set You now have a BLS Producer private key (key #10) and BLS Producer public key (key #11) Make sure you keep all these safely and securely in your password manager or whatever you use for safe storage of your crypto keys As FYI: Private keys (key #1, #4, #7) are all 64 hex characters long Public keys (key #2, #5, #8) are 66 hex characters long Blockchain (address #3, #7, #9) addresses are 42 hex characters long BLS Producer private keys (key #10) are 64 hex characters long BLS Producer public keys (key #11) are 192 hex characters long Node Operator Survey - Page 3 Now fill in page 3 of the Node Operator Survey as shown below, using information from the previous section: Hit naeste (next) to continue... Node Operator Survey - Page 4 Nothing to do here other than hit afslut (finish) to submit the Node Operator Survey Note that you can re-visit this survey and updates entries - for example if you need to change your VPS server IP address, website URL etc Generate Ethereum Endpoint An Ethereum Endpoint is needed to facilitate BYOC token exchange with the Ethereum blockchain - in this case a Ropsten Test-net endpoint is needed (an Ethereum Main-net endpoint will be needed for PBC Main-net when that is ready to go live) There are several companies that offer this, all for free within certain usage limits (which are not expected to be breached with PBC): Alchemy.com , Infura.io , Moralis.io or Zmok.io Infura is probably the most commonly used, and is a simple sign-up (see this tutorial ) - you need to record the https Ropsten endpoint details Infura's Ropsten endpoint will looks something like the following (where the 32 hex character string is your Infura project ID ): https://ropsten.infura.io/v3/0123456789abcdef9876543210fedcba Make sure also to set up 2FA with your Infura account Sometimes such endpoint providers do have extended outages, so it can be useful to have an account with a second such provider and have their endpoint details recorded so you can swap if needed Create Blockchain Directories On VPS for best security you should not use root as your default user \u2013 far better to create a non-root user based on the project name e.g., partisia or your own name or nickname - but it should ideally be the same non-root user you used to set up the VPS On VPS create the configuration and storage directories needed for the Partisia node, and give them appropriate ownership and permissions: sudo mkdir -p /opt/pbc-betanet/conf /opt/pbc-betanet/storage cd /opt sudo find ./pbc-betanet -exec chown yourUsername:yourGroupname {} \\; sudo find ./pbc-betanet -exec chmod go-rwx {} \\; Note: remember to appropriately replace yourUsername & yourGroupname in the above On VPS for checking purposes, display the directories - they should look like this: pwd ls -ad pbc-betanet ls -al pbc-betanet Create Blockchain Genesis File On VPS the Genesis file defines the initial state of the Partisia blockchain \u2013 first create the file: cd /opt/pbc-betanet/conf nano genesis.json On VPS then add the following content to that file: { \"chainId\": \"PARTISIA beta net with accounts\", \"rootAccount\": \"00047a53311c64239ecdc70ff5bbfd769175b64df0\" } On VPS give that file appropriate permissions: chmod 600 genesis.json On VPS for checking purposes, display that file - it should look like this: pwd ls -al genesis.json cat genesis.json Create Blockchain Configuration File On VPS the blockchain data needs to be stored locally \u2013 first create the file: cd /opt/pbc-betanet/conf nano config.json On VPS then add the following content to that file: { \"restPort\": 8080, \"floodingPort\": 9888, \"networkKey\": \"Block Producer private key (#4)\", \"producerConfig\": { \"accountKey\": \"Node Operator private key (#7)\", \"finalizationKey\": \"BLS Producer private key (#10)\", \"ethereumUrl\": \"ETHEREUM_ROPSTEN_HTTPS_ENDPOINT\" }, \"knownPeers\": [ \"188.180.83.49:9090\", \"188.180.83.49:9190\", \"188.180.83.49:9290\", \"188.180.83.49:9390\", \"174.138.2.217:9888\", \"172.93.110.125:9888\", \"107.189.1.171:9888\", \"176.78.42.5:9888\" ] } On VPS referring back to the Generate Keys & Addresses section: Replace Block Producer private key (#4) in this file with your actual hex key Block Producer private key (key #4) Replace Node Operator private key (#7) in this file with your actual hex key Node Operator private key (key #7) Replace BLS Producer private key (#10) in this file with your actual hex jey BLS Producer private key (key #10) On VPS referring back to the Generate Ethereum Endpoint section: Replace ETHEREUM_ROPSTEN_HTTPS_ENDPOINT in this file with your actual Ropsten URL (starying https://ropsten... ) On VPS give that file appropriate permissions: chmod 600 config.json On VPS for checking purposes, display that file - it should look like this: pwd ls -al config.json cat config.json Create Docker Compose File On VPS create a directory for the Partisia Docker file, and create the file: cd mkdir partisia chmod 700 partisia cd partisia nano docker-compose.yml On VPS check for your User ID (UID) and Group ID (GID): id Output should be similar to this, which shows UID = 1001, and GID = 1001: On VPS then add the following content to that file: pbc-betanet-reader: image: registry.gitlab.com/privacyblockchain/demo/betanet-public:latest container_name: pbc-betanet-reader user: \"1001:1001\" restart: always expose: - \"8080\" ports: - \"9888-9897:9888-9897\" command: [ \"/conf/config.json\", \"/conf/genesis.json\", \"/storage/\" ] volumes: - /opt/pbc-betanet/conf:/conf - /opt/pbc-betanet/storage:/storage environment: JAVA_TOOL_OPTIONS: \"-Xmx2G\" Note: remember to appropriately replace UID 1001 and GID 1001 in the above On VPS give that file appropriate permissions: chmod 600 docker-compose.yml On VPS for checking purposes, display that file - it should look like this: pwd ls -al docker-compose.yml cat docker-compose.yml Enable Partisia Network Ports On VPS allow the ports for Partisia (9888 - 9897) and check the firewall status: sudo ufw allow 9888:9897/tcp sudo ufw reload On VPS for checking purposes, display the firewall status - it should look like this: sudo ufw status Perform Docker Login On Mac / Windows if you did not set up 2FA for GitLab access when you registered on GitLab you can skip this step and go to step #2 below \u2013 otherwise access the URL below, fill in the personal access token name (e.g., partisia), tick the api box (for full API access), and store the resultant personal access token carefully in your password manager or similar: https://gitlab.com/-/profile/personal_access_tokens On VPS now perform the Docker login to the GitLab API \u2013 you will need to provide your GitLab-registered email address, plus either your GitLab password or (if you did set up 2FA) your personal access token: docker logout docker login -u yourEmailAddress registry.gitlab.com Start Partisia Node On VPS first pull the Partisia node image into a Docker container: cd cd partisia docker-compose pull Note: do this anytime you stop/start the node to ensure you are always using the latest image On VPS now start the Partisia node within Docker: docker-compose up -d Note: the -d argument ensures the container is started in the background, which allows you to disconnect from the VPS without killing the container View Partisia Logs On VPS view the Docker logs to see the Partisia node progress On Test-net the container is called pbc-betanet-reader (on Main-net it may be called something different, so expect to adjust this later): docker logs -f pbc-betanet-reader If the node has been running a long time, it can take many minutes to catch up through all the logs - in this case use the --tail argument to grab the last e.g. 1000 logs only: docker logs --tail 1000 -f pbc-betanet-reader Refer to Discord for an explanation of what the various logs mean - however at a high level, if there is a regular sequence of Handling / Signing / Executing logs with incrementing block numbers, this is generally a sign the node is working correctly Stop Partisia Node On VPS whenever needed, stop the Partisia node and remove the image from Docker: docker-compose down Restart Partisia Node (optional) On VPS this sequence pulls a fresh Partisia image (only if there is one) and performs a fresh start - this should be the normal operational restart sequence as it does not cause any downtime unless there is a fresh Partisia image: docker-compose pull docker-compose up -d On VPS this sequence performs a hard stop (stops & removes the Partisia image) then pulls a fresh Partisia image and performs a fresh start - this can be a good procedure to follow after a VPS reboot: docker-compose down docker-compose pull docker-compose up -d On VPS this sequence performs a simple stop & start without removing the Partisia image - if any changes made to the docker-compose.yml file after stopping, these will be used during the start: docker-compose stop docker-compose start On VPS this sequence performs a simple restart of the Partisia image - if any changes made to the docker-compose.yml file before restarting, these will not be used during the restart: docker-compose restart On VPS although not strictly a restart sequence per se ; this sequence performs a pause, and when needed, an unpause (i.e. resumption) of the Partisia image - this can be useful when trying to diagnose unrelated issues with the VPS: docker-compose pause docker-compose unpause Enable Automatic Docker Restarts On VPS ensure that Docker always restarts automatically after any sort of planned or unplanned VPS outage: sudo systemctl enable docker sudo systemctl daemon-reload Configure Test-Net Updates On VPS the current requirement on Test-net only is to perform a Partisia node restart every 30 minutes because of the frequent updates being deployed to Test-net - this allows the node to pick up those updates quickly On VPS create an update script file: cd cd partisia nano update_node.sh On VPS then add the following content to that script file: #!/bin/bash DATETIME=`/usr/bin/date -u` echo \"$DATETIME\" cd /home/yourUsername/partisia /usr/local/bin/docker-compose pull /usr/local/bin/docker-compose up -d Note: remember to appropriately replace yourUsername in the above On VPS give that script file appropriate permissions: cd cd partisia chmod 700 update_node.sh On VPS run that script manually, ensuring it executes as expected without any errors (do not go on to next step until all errors are fixed): cd cd partisia ./update_node.sh Note: errors with this script are usually down to using the wrong directory for the cd command, or some issue with the docker-compose command not being in the expected location On VPS now create a crontab entry: crontab -e On VPS then add the following content to that file to run that script every 30 minutes, piping standard output and errors to a log file in the same directory: */30 * * * * /home/yourUsername/partisia/update_node.sh > /home/yourUsername/partisia/update_node.log 2>&1 Note: remember to appropriately replace yourUsername twice in the above On VPS once that script has run, view the update logs using: cd cd partisia cat update_node.log or cat /home/yourUsername/partisia/update_node.log Note: remember to appropriately replace yourUsername in the above Suggestions ? Any errors or suggestions for content to be added - please email me at pitbullch@pitbullch.com , or DM me on Discord or Telegram as @PitBullCH .","title":"Secure Partisia Node Setup"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#kruptos-nomisma-presents","text":"","title":"Kruptos Nomisma presents..."},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#introduction","text":"This guide assumes a few important things about your VPS: You are using Contabo as your VPS provider \u2013 if using another provider there may be subtle differences in terms of what is or is not already installed ! Instructions intended to be run on a certain platform will be preceded with the following words: On Mac - this is for running on Mac only On Windows - this is for running on Windows only On Mac / Windows - this is for running on Mac or Windows (as appropriate for your situation) On VPS - this is for running on VPS only You will access your VPS over a command-line terminal: On Mac this would be the default Terminal app, or better, the 3rd-party iTerm2 app On Windows this would be the default Command Prompt or PowerShell, or perhaps, the 3rd-party Putty app You understand that Partisia node logs on the VPS will use the UTC time-zone for timestamps and thus log times may be some hours in front of or behind your own local time \u2013 this is because time under UTC never changes through daylight savings time so gives full consistency and continuity I will use yourUsername and yourGroupname in my examples - you will need to replace these appropriately with your own values This guide assumes a few important things about you and Linux: You are using the Linux Ubuntu distro v20.04 (not earlier) \u2013 other distros will work, but there may be subtle differences which you will have to work out yourself ! You may not have too much Unix / Linux experience and you may find some part of this guide a little daunting, but you are NOT afraid to make mistakes and start all over again, and you are NOT afraid to ask questions You should ideally be familiar with one of the usual Unix / Linux command-line editors \u2013 I have used nano in all examples as it is more intuitive and user friendly, but please feel free to use vi if you are more comfortable with that A few important words on security: Store your most critical & private items relating to a blockchain node securely & safely \u2013 preferably in a password manager (1Password, Bitwarden, KeePassXC all recommended) \u2013 means wallet private keys, login passwords (root and non-root) and SSH keys: Store with them your node wallet address & VPS IP address because you will need these - keeping them together makes it easier later Store the emergency VPS VNC IP address, username, and password from your VPS provider \u2013 you may need them if things go wrong SSH is critical for the security of your VPS - do not skip the setup of this One final thing: although I am experienced on node setups, I do not consider myself an expert \u2013 there are thousands of people with more clue than I, and probably similar Partisia node setup guides which are much more comprehensive than this \u2013 but this one does the job for me ;-) Intro over \u2013 now let us get down to the good stuff, and in the words of the late, great Douglas Adams: Don\u2019t Panic !","title":"Introduction"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#sign-testnet-agreement","text":"Signing the Testnet Agreemnet is a pre-requisite to getting access to the Partisia GitLab repository: without this the node cannot function - so DM @bryanpartisia in Discord with the following information and asking for the Testnet Agreement: Full Name as stated on the official ID that you used for KYC Email Address that you used for KYC Residential Address that you used for KYC You will receive the Testnet Agreement via the HelloSign facility - the email will be from Partisia Blockchain ( noreply@mail.hellosign.com ) - review this carefully and sign it, it will be send back to Partisia automatically. The email looks like this: You will then receive via the HelloSign facility a copy of the signed agreement - again the email will be from HelloSign ( noreply@mail.hellosign.com ) - make sure to story this safely. The email looks like this:","title":"Sign Testnet Agreement"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#node-operator-survey","text":"Within a day or two of the above, you will receive via email an invite from Peter Frandsen to undertake a Node Operator Survey - the email will be from Node Vetting ( partisia-xxxxxxxxx@survey.au.dk - where xxxxxxxxx is a random number) and this survey is critical as it is used to inform Partisia regarding your public addresses & keys). The email looks like this: Note: the 12-character Survey Key in the email is unique to you, and must not be shared with others - this is critical as any leakage could result in your node being compromised","title":"Node Operator Survey"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#node-operator-survey-page-1","text":"For the first page of the Survey you only need to fill in the USD value of your Partisia investment, and indicate your level of experise with respect to operating blockchain node: Hit naeste (next) to continue... Note: Do not be too worried about your level of technical expertise - as long as you have the aptitude and willingness to learn, the Discord-based Node Operator community will be there to help you !","title":"Node Operator Survey - Page 1"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#node-operator-survey-page-2","text":"For the second page of the Survey I would advise to answer the same as below, other than adjusting your answer for the second question depending on your own circumstances: Hit naeste (next) to continue...","title":"Node Operator Survey - Page 2"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#generate-keys-addresses","text":"Before filling in the next page, in another browser window go the key generator website to generate the various required sets of keys & addresses: https://dashboard.partisiablockchain.com/keygen It will look like this (FYI the keys you see here were discarded, they were never used): There are two sections: Upper section comprises a private / public keypair plus the associated blockchain address Lower section comprises just a BLS Producer private / public keypair Each time you hit the Generate button, it generates new entries in both sections. Note however that the upper and lower sections are completely independent of each other, so you could take the entries from one of the sections now, hit Generate as many times as you like then take the entries from the other section - and that is perfectly fine ! In total you need three sets of entries from the upper section, and one from the lower section - as follows: For the first set (from the upper section ): If you are still confident that the keypair / address from your KYC / Sale keygen session are secure and valid then you can use these... Otherwise generate now a new set (in this case, you will need to inform @bryanpartisia before TGE about the new blockchain address) Regardless: you have a KYC / Sale private key (key #1), KYC / Sale public key (key #2), and KYC / Sale blockchain address (address #3) Then for the second set (from the upper section ): You could use the keypair / address from your Test-Net Baker node if you have them (though I would advise to keep those purely for Test-net activities)... Otherwise generate now a new set Regardless: you have a Block Producer private key (key #4), Block Producer public key (key #5), and Block Producer blockchain address (address #6) Then for the third set (from the upper section ): You probably don't already have any existing ones to use for this, so just generate a new set You now have a Node Operator private key (key #7), Node Operator public key (key #8), and Node Operator blockchain address (address #9) Finally for the fourth set (from the lower section ): You don't already have any existing ones to use for this, so just generate a new set You now have a BLS Producer private key (key #10) and BLS Producer public key (key #11) Make sure you keep all these safely and securely in your password manager or whatever you use for safe storage of your crypto keys As FYI: Private keys (key #1, #4, #7) are all 64 hex characters long Public keys (key #2, #5, #8) are 66 hex characters long Blockchain (address #3, #7, #9) addresses are 42 hex characters long BLS Producer private keys (key #10) are 64 hex characters long BLS Producer public keys (key #11) are 192 hex characters long","title":"Generate Keys &amp; Addresses"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#node-operator-survey-page-3","text":"Now fill in page 3 of the Node Operator Survey as shown below, using information from the previous section: Hit naeste (next) to continue...","title":"Node Operator Survey - Page 3"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#node-operator-survey-page-4","text":"Nothing to do here other than hit afslut (finish) to submit the Node Operator Survey Note that you can re-visit this survey and updates entries - for example if you need to change your VPS server IP address, website URL etc","title":"Node Operator Survey - Page 4"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#generate-ethereum-endpoint","text":"An Ethereum Endpoint is needed to facilitate BYOC token exchange with the Ethereum blockchain - in this case a Ropsten Test-net endpoint is needed (an Ethereum Main-net endpoint will be needed for PBC Main-net when that is ready to go live) There are several companies that offer this, all for free within certain usage limits (which are not expected to be breached with PBC): Alchemy.com , Infura.io , Moralis.io or Zmok.io Infura is probably the most commonly used, and is a simple sign-up (see this tutorial ) - you need to record the https Ropsten endpoint details Infura's Ropsten endpoint will looks something like the following (where the 32 hex character string is your Infura project ID ): https://ropsten.infura.io/v3/0123456789abcdef9876543210fedcba Make sure also to set up 2FA with your Infura account Sometimes such endpoint providers do have extended outages, so it can be useful to have an account with a second such provider and have their endpoint details recorded so you can swap if needed","title":"Generate Ethereum Endpoint"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#create-blockchain-directories","text":"On VPS for best security you should not use root as your default user \u2013 far better to create a non-root user based on the project name e.g., partisia or your own name or nickname - but it should ideally be the same non-root user you used to set up the VPS On VPS create the configuration and storage directories needed for the Partisia node, and give them appropriate ownership and permissions: sudo mkdir -p /opt/pbc-betanet/conf /opt/pbc-betanet/storage cd /opt sudo find ./pbc-betanet -exec chown yourUsername:yourGroupname {} \\; sudo find ./pbc-betanet -exec chmod go-rwx {} \\; Note: remember to appropriately replace yourUsername & yourGroupname in the above On VPS for checking purposes, display the directories - they should look like this: pwd ls -ad pbc-betanet ls -al pbc-betanet","title":"Create Blockchain Directories"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#create-blockchain-genesis-file","text":"On VPS the Genesis file defines the initial state of the Partisia blockchain \u2013 first create the file: cd /opt/pbc-betanet/conf nano genesis.json On VPS then add the following content to that file: { \"chainId\": \"PARTISIA beta net with accounts\", \"rootAccount\": \"00047a53311c64239ecdc70ff5bbfd769175b64df0\" } On VPS give that file appropriate permissions: chmod 600 genesis.json On VPS for checking purposes, display that file - it should look like this: pwd ls -al genesis.json cat genesis.json","title":"Create Blockchain Genesis File"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#create-blockchain-configuration-file","text":"On VPS the blockchain data needs to be stored locally \u2013 first create the file: cd /opt/pbc-betanet/conf nano config.json On VPS then add the following content to that file: { \"restPort\": 8080, \"floodingPort\": 9888, \"networkKey\": \"Block Producer private key (#4)\", \"producerConfig\": { \"accountKey\": \"Node Operator private key (#7)\", \"finalizationKey\": \"BLS Producer private key (#10)\", \"ethereumUrl\": \"ETHEREUM_ROPSTEN_HTTPS_ENDPOINT\" }, \"knownPeers\": [ \"188.180.83.49:9090\", \"188.180.83.49:9190\", \"188.180.83.49:9290\", \"188.180.83.49:9390\", \"174.138.2.217:9888\", \"172.93.110.125:9888\", \"107.189.1.171:9888\", \"176.78.42.5:9888\" ] } On VPS referring back to the Generate Keys & Addresses section: Replace Block Producer private key (#4) in this file with your actual hex key Block Producer private key (key #4) Replace Node Operator private key (#7) in this file with your actual hex key Node Operator private key (key #7) Replace BLS Producer private key (#10) in this file with your actual hex jey BLS Producer private key (key #10) On VPS referring back to the Generate Ethereum Endpoint section: Replace ETHEREUM_ROPSTEN_HTTPS_ENDPOINT in this file with your actual Ropsten URL (starying https://ropsten... ) On VPS give that file appropriate permissions: chmod 600 config.json On VPS for checking purposes, display that file - it should look like this: pwd ls -al config.json cat config.json","title":"Create Blockchain Configuration File"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#create-docker-compose-file","text":"On VPS create a directory for the Partisia Docker file, and create the file: cd mkdir partisia chmod 700 partisia cd partisia nano docker-compose.yml On VPS check for your User ID (UID) and Group ID (GID): id Output should be similar to this, which shows UID = 1001, and GID = 1001: On VPS then add the following content to that file: pbc-betanet-reader: image: registry.gitlab.com/privacyblockchain/demo/betanet-public:latest container_name: pbc-betanet-reader user: \"1001:1001\" restart: always expose: - \"8080\" ports: - \"9888-9897:9888-9897\" command: [ \"/conf/config.json\", \"/conf/genesis.json\", \"/storage/\" ] volumes: - /opt/pbc-betanet/conf:/conf - /opt/pbc-betanet/storage:/storage environment: JAVA_TOOL_OPTIONS: \"-Xmx2G\" Note: remember to appropriately replace UID 1001 and GID 1001 in the above On VPS give that file appropriate permissions: chmod 600 docker-compose.yml On VPS for checking purposes, display that file - it should look like this: pwd ls -al docker-compose.yml cat docker-compose.yml","title":"Create Docker Compose File"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#enable-partisia-network-ports","text":"On VPS allow the ports for Partisia (9888 - 9897) and check the firewall status: sudo ufw allow 9888:9897/tcp sudo ufw reload On VPS for checking purposes, display the firewall status - it should look like this: sudo ufw status","title":"Enable Partisia Network Ports"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#perform-docker-login","text":"On Mac / Windows if you did not set up 2FA for GitLab access when you registered on GitLab you can skip this step and go to step #2 below \u2013 otherwise access the URL below, fill in the personal access token name (e.g., partisia), tick the api box (for full API access), and store the resultant personal access token carefully in your password manager or similar: https://gitlab.com/-/profile/personal_access_tokens On VPS now perform the Docker login to the GitLab API \u2013 you will need to provide your GitLab-registered email address, plus either your GitLab password or (if you did set up 2FA) your personal access token: docker logout docker login -u yourEmailAddress registry.gitlab.com","title":"Perform Docker Login"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#start-partisia-node","text":"On VPS first pull the Partisia node image into a Docker container: cd cd partisia docker-compose pull Note: do this anytime you stop/start the node to ensure you are always using the latest image On VPS now start the Partisia node within Docker: docker-compose up -d Note: the -d argument ensures the container is started in the background, which allows you to disconnect from the VPS without killing the container","title":"Start Partisia Node"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#view-partisia-logs","text":"On VPS view the Docker logs to see the Partisia node progress On Test-net the container is called pbc-betanet-reader (on Main-net it may be called something different, so expect to adjust this later): docker logs -f pbc-betanet-reader If the node has been running a long time, it can take many minutes to catch up through all the logs - in this case use the --tail argument to grab the last e.g. 1000 logs only: docker logs --tail 1000 -f pbc-betanet-reader Refer to Discord for an explanation of what the various logs mean - however at a high level, if there is a regular sequence of Handling / Signing / Executing logs with incrementing block numbers, this is generally a sign the node is working correctly","title":"View Partisia Logs"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#stop-partisia-node","text":"On VPS whenever needed, stop the Partisia node and remove the image from Docker: docker-compose down","title":"Stop Partisia Node"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#restart-partisia-node-optional","text":"On VPS this sequence pulls a fresh Partisia image (only if there is one) and performs a fresh start - this should be the normal operational restart sequence as it does not cause any downtime unless there is a fresh Partisia image: docker-compose pull docker-compose up -d On VPS this sequence performs a hard stop (stops & removes the Partisia image) then pulls a fresh Partisia image and performs a fresh start - this can be a good procedure to follow after a VPS reboot: docker-compose down docker-compose pull docker-compose up -d On VPS this sequence performs a simple stop & start without removing the Partisia image - if any changes made to the docker-compose.yml file after stopping, these will be used during the start: docker-compose stop docker-compose start On VPS this sequence performs a simple restart of the Partisia image - if any changes made to the docker-compose.yml file before restarting, these will not be used during the restart: docker-compose restart On VPS although not strictly a restart sequence per se ; this sequence performs a pause, and when needed, an unpause (i.e. resumption) of the Partisia image - this can be useful when trying to diagnose unrelated issues with the VPS: docker-compose pause docker-compose unpause","title":"Restart Partisia Node (optional)"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#enable-automatic-docker-restarts","text":"On VPS ensure that Docker always restarts automatically after any sort of planned or unplanned VPS outage: sudo systemctl enable docker sudo systemctl daemon-reload","title":"Enable Automatic Docker Restarts"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#configure-test-net-updates","text":"On VPS the current requirement on Test-net only is to perform a Partisia node restart every 30 minutes because of the frequent updates being deployed to Test-net - this allows the node to pick up those updates quickly On VPS create an update script file: cd cd partisia nano update_node.sh On VPS then add the following content to that script file: #!/bin/bash DATETIME=`/usr/bin/date -u` echo \"$DATETIME\" cd /home/yourUsername/partisia /usr/local/bin/docker-compose pull /usr/local/bin/docker-compose up -d Note: remember to appropriately replace yourUsername in the above On VPS give that script file appropriate permissions: cd cd partisia chmod 700 update_node.sh On VPS run that script manually, ensuring it executes as expected without any errors (do not go on to next step until all errors are fixed): cd cd partisia ./update_node.sh Note: errors with this script are usually down to using the wrong directory for the cd command, or some issue with the docker-compose command not being in the expected location On VPS now create a crontab entry: crontab -e On VPS then add the following content to that file to run that script every 30 minutes, piping standard output and errors to a log file in the same directory: */30 * * * * /home/yourUsername/partisia/update_node.sh > /home/yourUsername/partisia/update_node.log 2>&1 Note: remember to appropriately replace yourUsername twice in the above On VPS once that script has run, view the update logs using: cd cd partisia cat update_node.log or cat /home/yourUsername/partisia/update_node.log Note: remember to appropriately replace yourUsername in the above","title":"Configure Test-Net Updates"},{"location":"PitBullCH-Secure_Partisia_Node_Setup/PitBullCH-Secure_Partisia_Node_Setup/#suggestions","text":"Any errors or suggestions for content to be added - please email me at pitbullch@pitbullch.com , or DM me on Discord or Telegram as @PitBullCH .","title":"Suggestions ?"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/","text":"Kruptos Nomisma presents... Introduction First things first: I want to thank @jayjaynl for his original Secure LTO Network Node Setup Guide \u2013 my document is strongly based on his excellent original, with edits and additions of my own \u2013 you can find his original here: https://medium.com/@jayjaynl/extensive-guide-to-a-secure-lto-network-public-node-setup-33053a4370c8 This guide assumes a few important things about your VPS: You are using Contabo as your VPS provider \u2013 if using another provider there may be subtle differences in terms of what is or is not already installed ! Instructions intended to be run on a certain platform will be preceded with the following words: On Mac - this is for running on Mac only On Windows - this is for running on Windows only On Mac/Windows - this is for running on Mac or Windows (as appropriate for your situation) On VPS - this is for running on VPS only You will access your VPS over a command-line terminal: On Mac this would be the default Terminal app, or better, the 3rd-party iTerm2 app On Windows this would be the default Command Prompt or PowerShell, or perhaps, the 3rd-party Putty app For VPS recovery purposes you will need a VNC client \u2013 best to have that ready to go: On Mac you can enter the VNC URL into a browser and it will bring up the built-in Screen Sharing app On Windows there is no built-in VNC client, get the 3rd-party UltraVNC app from https://www.uvnc.com This guide assumes a few important things about you and Linux: You are using the Linux Ubuntu distro v20.04 (not earlier) \u2013 other distros will work, but there may be subtle differences which you will have to work out yourself ! You may not have too much Unix / Linux experience and you may find some part of this guide a little daunting, but you are NOT afraid to make mistakes and start all over again, and you are NOT afraid to ask questions You should ideally be familiar with one of the usual Unix / Linux command-line editors \u2013 I have used nano in all examples as it is more intuitive and user friendly, but please feel free to use vi if you are more comfortable with that A few important words on security: Store your most critical & private items relating to a blockchain node securely & safely \u2013 preferably in a password manager (1Password, Bitwarden, KeePassXC all recommended) \u2013 means wallet private keys, login passwords (root and non-root) and SSH keys: Store with them your node wallet address & VPS IP address because you will need these - keeping them together makes it easier later Store the emergency VPS VNC IP address, username, and password from your VPS provider \u2013 you may need them if things go wrong SSH is critical for the security of your VPS - do not skip the setup of this One final thing: although I am experienced on VPS setups, I do not consider myself an expert \u2013 there are thousands of people with more clue than I, and hundreds of similar VPS setup guides which are much more comprehensive than this \u2013 but this one does the job for me ;-) Intro over \u2013 now let us get down to the good stuff, and in the words of the late, great Douglas Adams: Don\u2019t Panic ! Network Diagram Below attempts to show the relationship between your local device (Mac/Windows PC etc) and your VPS, what you will use to connect between them during normal everyday usage, and what to use during emergency usage when you have locked yourself out: Set New Root Password On Mac/Windows for best security and safety, connect to your VPS (I will use VPS IP address 192.168.0.50 in my examples) and then change the VPS provider-assigned root password - first make the connection: ssh 192.168.0.50 -l root On VPS on very rare occasions the VPS provider does not install the SSH server by default and the above ssh command will fail - means before you connect via SSH you need to connect to the VPS via VNC, then install the SSH server: apt update apt install openssh-server On VPS then change the root password: passwd root Open Emergency Window (Critical !!!) On Mac/Windows now login to the VPS again in a new (second) connection using the new password to ensure that it is working - this avoids the situation where you change the password, close your connection, open a new one only to find you screwed up the password change somehow On Mac/Windows remember to open a new second connection to the VPS after every reboot On Mac/Windows if you ever get locked out of your VPS and don\u2019t have a second connection already open, you will need to connect to your VPS over VNC - refer to your VPS provider's VNC documentation for this Set Up Non-Root User On VPS for best security you should not use root as your default user \u2013 far better to create a non-root user based on the project name e.g., partisia or your own name or nickname (I will use yourUsername in my examples): adduser yourUsername On VPS add your non-root user to the sudo users list (so you can later execute commands with root privileges via sudo), and allow it to access system logs: usermod -aG sudo yourUsername usermod -aG systemd-journal yourUsername On VPS now logout and reconnect, then check that the above commands worked - you should see those two groups included: groups Set Up SSH For Secure Connections EITHER For Mac On Mac (in Terminal or iTerm2 ) create your SSH public / private key-pair \u2013 accept all the defaults, and enter a secure passphrase: cd ssh-keygen On Mac display your key file, and copy it to the VPS: cd cd .ssh cat id_rsa.pub ssh-copy-id yourUsername@192.168.0.50 On VPS check that your key file is in place and display it: cd cd .ssh ls -al authorized_keys cat authorized_keys On Mac and on VPS if you look at the two files, the content should be indentical. OR For Windows On Windows (in Command Prompt or PowerShell ), create your SSH public / private key-pair \u2013 accept all the defaults, and enter a secure passphrase: cd /d c:%HOMEPATH% ssh-keygen On VPS create your .ssh directory: cd mkdir .ssh chmod 700 .ssh On Windows display your key file, and copy it to the VPS: cd /d c:%HOMEPATH% type id_rsa.pub scp id_rsa.pub yourUsername@192.168.0.50:/home/yourUsername/.ssh/authorized_keys On VPS check that your key file is in place and display it: cd cd .ssh ls -al authorized_keys cat authorized_keys On Windows and on VPS if you look at the two files, the content should be indentical. On Mac/Windows now connect to your VPS via SSH - this will need your new SSH passphrase: ssh yourUsername@192.168.0.50 On VPS change configuration to disable normal password logins so that only SSH logins are allowed, and also change the SSH port for a little extra security (the port number should be in the range 1025-65535 \u2013 I will use 33333 in my examples) - first back up the SSH config file: sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.myback On VPS edit the SSH config file: sudo nano /etc/ssh/sshd_config On VPS find and change the settings below in that file - if there is a comment character (#) in front of one, you need to remove it for the setting to be able to take effect: Port 33333 PermitRootLogin no MaxAuthTries 3 PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys PasswordAuthentication no PermitEmptyPasswords no AllowAgentForwarding no AllowTcpForwarding no X11Forwarding no On VPS test the SSH configuration file for errors \u2013 fix any that are shown, continue testing and fixing until all clear \u2013 once it reports nothing back, all is good: sudo sshd -t On VPS restart the SSH service for the new configuration to take effect: sudo systemctl restart ssh sudo systemctl status ssh On VPS hit Q or Ctrl + C to terminate the above command (if needed) On Mac/Windows now connect again to your VPS via SSH - this time it will need both the new port number and your SSH passphrase: ssh -p 33333 yourUsername@192.168.0.50 On VPS only If this SSH configuration goes wrong then copy your backup config file back into place and restart the SSH service again: sudo cp /etc/ssh/sshd_config.myback /etc/ssh/sshd_config sudo systemctl restart ssh On VPS hit Q or Ctrl + C to terminate the above command (if needed) Update Ubuntu On VPS update the master package list, then upgrade to all latest listed packages, reboot, and re-connect to your VPS: sudo apt update sudo apt upgrade sudo reboot Install NTP (Network Time Protocol) On VPS blockchain nodes are usually incredibly sensitive to time drift so this is critical to configure \u2013 first install the NTP package itself (you may find it is already installed): sudo apt update sudo apt install ntp ntpdate On VPS then stop the NTP service, point it towards a valid NTP server, and restart the service: sudo service ntp stop sudo ntpdate pool.ntp.org sudo service ntp start sudo systemctl status ntp On VPS hit Q or Ctrl + C to terminate the above command (if needed) Install Fail2Ban On VPS Fail2Ban is used to block repeated incoming connection attempts, which are usually a sign of a malicious attack - first install the Fail2Ban package itself: sudo apt update sudo apt install fail2ban sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local On VPS then back up the Fail2Ban config file: sudo cp /etc/fail2ban/jail.local /etc/fail2ban/jail.myback On VPS then edit the Fail2Ban config file: sudo nano /etc/fail2ban/jail.local On VPS replace every line containing \u201c port = ssh \u201d with \u201c port = 33333 \u201d (the port number you defined for SSH earlier) - normally there are 3 such entries: [sshd] port = 33333 logpath = %(sshd_log)s backend = %(sshd_backend)s [dropbear] Port = 33333 logpath = %(dropbear_log)s backend = %(dropbear_backend)s [selinux-ssh] port = 33333 logpath = %(auditd_log)s On VPS then start the Fail2Ban service for this to actually take effect: sudo systemctl enable fail2ban sudo service fail2ban start sudo systemctl status fail2ban On VPS hit Q or Ctrl + C to terminate the above command (if needed) On VPS only If this Fail2Ban configuration goes wrong then copy your backup config file back into place and stop the Fail2Ban service: sudo cp /etc/fail2ban/jail.myback /etc/fail2ban/jail.local sudo service fail2ban stop sudo systemctl status fail2ban On VPS hit Q or Ctrl + C to terminate the above command (if needed) Set Up The Firewall On VPS the Uncomplicated Firewall (UFW) is used to stop / block incoming potentially malicious traffic - as a baseline block all the incoming ports, then allow traffic on specific ports for SSH (ports 22, 33333), VNC (port 5900), and Webmin (port 10000) connections: sudo ufw disable sudo ufw default deny incoming sudo ufw default allow outgoing sudo ufw allow 22 sudo ufw allow 33333 sudo ufw allow 5900 sudo ufw allow 10000 On VPS re-enable the firewall and firewall logging and check the firewall status: sudo ufw logging on sudo ufw enable sudo ufw status On VPS my output from that last command looks like this: Note: you can ignore port 80 in the above for now - this is because I have that port open for something else Install Webmin On VPS Webmin is an excellent web-based administration and monitoring tool - first install the packages and certificates required for installing Webmin, and add the Webmin repository: sudo apt update sudo apt install gpg-agent apt-transport-https software-properties-common wget -qO - http://www.webmin.com/jcameron-key.asc | sudo apt-key add Note: in the \"wget\" command above, that is a capital letter O, not a zero sudo add-apt-repository \"deb [arch=amd64] http://download.webmin.com/download/repository sarge contrib\" On VPS update the package repository, then install the Webmin package itself, and check it is running (it normally starts automatically after installation): sudo apt update sudo apt install webmin sudo systemctl status webmin On VPS hit Ctrl + C to terminate the above command (if needed) On VPS on Ubuntu 21.04 onwards Webmin is started a different way: sudo /etc/init.d/webmin restart On Mac/Windows to access Webmin, open your browser and enter this URL ( yourHost.yourProvider.com is your VPS' fully-qualified domain name, 10000 is the default Webmin port): https://yourHostname.yourProvider.com:10000 Or you can use the VPS IP address instead: https:// 192.168.0.50:10000 On Mac/Windows login with your non-root user and password \u2013 if you need some help with Webmin, you can find that here: https://www.webmin.com/docs.html https://www.webmin.com/faq.html On Mac/Windows as you can see below, I need to do some updating ! Install Docker & Docker-Compose On VPS Docker is a container technology used to run software such as the Partisia node in a secure pre-configured environment \u2013 first install the packages and certificates required for installing Docker, and add the Docker repository: sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null On VPS update the package repository, then install the Docker package itself: sudo apt update sudo apt install docker-ce docker-ce-cli containerd.io On VPS install the Docker Compose package, then ensure it is executable, and reachable from the normal directory: sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose On VPS add the docker group (it may already be added - in which case ignore the error), then add your non-root user to that group: sudo groupadd docker sudo usermod -aG docker yourUsername On VPS now log out and re-connect to your VPS for the above to take effect, then check your groups and test the docker installations: docker run hello-world docker-compose -version On VPS my output from those last three commands looks like this: Install Mail Utilities On VPS it\u2019s potentially very useful to be able to be able to send emails for warnings etc \u2013 first install the mailutils package itself: sudo apt update sudo apt install mailutils sendmail On VPS with pre-20.xx versions of Ubuntu you will get a pop-up screen asking you to select the General type of mail configuration - select Internet Site and hit Return: You will then be asked to enter your System mail name \u2013 just accept the default and hit Return: On VPS test the installation by sending a mail - this should result in an email being sent to your email address, the content being that of the /etc/shells file from your VPS: mail -s \"testing my VPS\" yourEmailAddress < /etc/shells Note: some VPS providers do not allow email to be sent in the first 24 hours after a VPS is ordered, or in some cases you must contact the VPS Support team to request to be able to send emails - this is part of their process to stop spammers - means you may need to re-test this depending on your VPS provider Install Bashtop On VPS Bashtop is an excellent top alternative for checking system resources \u2013 first install the packages and certificates required for installing Bashtop: wget -qO - https://azlux.fr/repo.gpg.key | sudo apt-key add Note: in the \"wget\" command above, that is a capital letter O, not a zero echo \"deb http://packages.azlux.fr/debian/ buster main\" | sudo tee /etc/apt/sources.list.d/azlux.list On VPS update the package repository, then install the Bashtop package itself and run it: sudo apt update sudo apt install bashtop bashtop On VPS my Bashtop output looks like this: Appendix A - VPS Maintenance (Critical !!!) I\u2019m not going to add much here \u2013 main thing to do is to ensure your Ubuntu packages are up to date \u2013 I would strongly advise you do this on a regular basis, perhaps schedule a regular 30-minute slot every week or two. There are two main ways to do this: On Mac/Windows via WebMin on the main dashboard page it will tell you how many packages are out of date, click on that list and it\u2019ll take you to an update screen On VPS via the command line \u2013 you may or may not need to reboot (usually only if there is a kernel update) keep an eye out on your disk space usage, especially if you are renting a VPS with a relatively small SSD. Again there are two main ways to do this: On Mac/Windows via WebMin on the main dashboard page at the bottom is the Disk Usage section - I would advice to keep this permanently open so you can always see the current usage - my usage looks like this: On VPS you will see a more complex output using the following: df -h On VPS Depending on the disk partition layout you have, you need to watch out for \"/\" (the root filesystem) and possibly also \"/boot\" (if you only have that as a separate partition) - my usage looks like this: Appendix B - VPS Control From A Secondary Device If you want to be able to control your VPS from a secondary device (Mac or Windows PC) in case of issues with your primary device, or maybe because you are travelling with a secondary device, you first need to set up access for that device. Now assuming you already set up access from your primary Mac/Windows desktop #1, and because you might be travelling, you also want to set up access from your secondary Mac/Windows laptop #2. On Mac/Windows #1 as a safety precaution, open 2 connections from your primary device to your VPS On Mac/Windows #2 generate the new key pair (see section 6 of this guide) On Mac/Windows #2 find the newly generated public key file - it should be in the .ssh directory under your home directory, and will be called id_rsa.pub On Mac/Windows #2 you now need to get the contents of that file from your secondary device to the VPS Easiest way is to copy it to a USB stick on the secondary device, then insert the USB stick into the primary device Other options including emailing it to yourself on your primary device, or copying it from the secondary device to a NAS or Dropbox account (if you have one) then copying from the NAS/Dropbox account to the primary device - but the USB stick is easiest On Mac/Windows #1 find the newly copied public key file and open it in a text editor ( TextEdit on Mac, Textpad or Wordpad on Windows), highlight and copy the file contents into your copy/paste buffer ( Cmd + C on Mac, Ctrl + C on Windows) On VPS via one of the connections opened in step #1 (above), edit the authorized_keys file: cd cd .ssh nano authorized_keys On VPS go to the end of the file, paste ( Cmd + V on Mac, Ctrl + V on Windows) your copy/paste buffer contents into the file, write and quit - then review the file to ensure it is correct - you should now see that new line at the end: cat authorized_keys On Mac/Windows #2 test a new connection to the VPS and ensure that it works ssh yourUsername2@192.168.0.50 Note that you might be using a different username on the secondary device to the one you are using on the primary device - if you are not sure, look at the line you just added to the authorized_keys file on the VPS, the last part of the line will be username2@hostname where username2 will be the username on that secondary device - that is what you use in the ssh command","title":"Secure VPS Setup for Blockchain"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#kruptos-nomisma-presents","text":"","title":"Kruptos Nomisma presents..."},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#introduction","text":"First things first: I want to thank @jayjaynl for his original Secure LTO Network Node Setup Guide \u2013 my document is strongly based on his excellent original, with edits and additions of my own \u2013 you can find his original here: https://medium.com/@jayjaynl/extensive-guide-to-a-secure-lto-network-public-node-setup-33053a4370c8 This guide assumes a few important things about your VPS: You are using Contabo as your VPS provider \u2013 if using another provider there may be subtle differences in terms of what is or is not already installed ! Instructions intended to be run on a certain platform will be preceded with the following words: On Mac - this is for running on Mac only On Windows - this is for running on Windows only On Mac/Windows - this is for running on Mac or Windows (as appropriate for your situation) On VPS - this is for running on VPS only You will access your VPS over a command-line terminal: On Mac this would be the default Terminal app, or better, the 3rd-party iTerm2 app On Windows this would be the default Command Prompt or PowerShell, or perhaps, the 3rd-party Putty app For VPS recovery purposes you will need a VNC client \u2013 best to have that ready to go: On Mac you can enter the VNC URL into a browser and it will bring up the built-in Screen Sharing app On Windows there is no built-in VNC client, get the 3rd-party UltraVNC app from https://www.uvnc.com This guide assumes a few important things about you and Linux: You are using the Linux Ubuntu distro v20.04 (not earlier) \u2013 other distros will work, but there may be subtle differences which you will have to work out yourself ! You may not have too much Unix / Linux experience and you may find some part of this guide a little daunting, but you are NOT afraid to make mistakes and start all over again, and you are NOT afraid to ask questions You should ideally be familiar with one of the usual Unix / Linux command-line editors \u2013 I have used nano in all examples as it is more intuitive and user friendly, but please feel free to use vi if you are more comfortable with that A few important words on security: Store your most critical & private items relating to a blockchain node securely & safely \u2013 preferably in a password manager (1Password, Bitwarden, KeePassXC all recommended) \u2013 means wallet private keys, login passwords (root and non-root) and SSH keys: Store with them your node wallet address & VPS IP address because you will need these - keeping them together makes it easier later Store the emergency VPS VNC IP address, username, and password from your VPS provider \u2013 you may need them if things go wrong SSH is critical for the security of your VPS - do not skip the setup of this One final thing: although I am experienced on VPS setups, I do not consider myself an expert \u2013 there are thousands of people with more clue than I, and hundreds of similar VPS setup guides which are much more comprehensive than this \u2013 but this one does the job for me ;-) Intro over \u2013 now let us get down to the good stuff, and in the words of the late, great Douglas Adams: Don\u2019t Panic !","title":"Introduction"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#network-diagram","text":"Below attempts to show the relationship between your local device (Mac/Windows PC etc) and your VPS, what you will use to connect between them during normal everyday usage, and what to use during emergency usage when you have locked yourself out:","title":"Network Diagram"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#set-new-root-password","text":"On Mac/Windows for best security and safety, connect to your VPS (I will use VPS IP address 192.168.0.50 in my examples) and then change the VPS provider-assigned root password - first make the connection: ssh 192.168.0.50 -l root On VPS on very rare occasions the VPS provider does not install the SSH server by default and the above ssh command will fail - means before you connect via SSH you need to connect to the VPS via VNC, then install the SSH server: apt update apt install openssh-server On VPS then change the root password: passwd root","title":"Set New Root Password"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#open-emergency-window-critical","text":"On Mac/Windows now login to the VPS again in a new (second) connection using the new password to ensure that it is working - this avoids the situation where you change the password, close your connection, open a new one only to find you screwed up the password change somehow On Mac/Windows remember to open a new second connection to the VPS after every reboot On Mac/Windows if you ever get locked out of your VPS and don\u2019t have a second connection already open, you will need to connect to your VPS over VNC - refer to your VPS provider's VNC documentation for this","title":"Open Emergency Window (Critical !!!)"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#set-up-non-root-user","text":"On VPS for best security you should not use root as your default user \u2013 far better to create a non-root user based on the project name e.g., partisia or your own name or nickname (I will use yourUsername in my examples): adduser yourUsername On VPS add your non-root user to the sudo users list (so you can later execute commands with root privileges via sudo), and allow it to access system logs: usermod -aG sudo yourUsername usermod -aG systemd-journal yourUsername On VPS now logout and reconnect, then check that the above commands worked - you should see those two groups included: groups","title":"Set Up Non-Root User"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#set-up-ssh-for-secure-connections","text":"EITHER For Mac On Mac (in Terminal or iTerm2 ) create your SSH public / private key-pair \u2013 accept all the defaults, and enter a secure passphrase: cd ssh-keygen On Mac display your key file, and copy it to the VPS: cd cd .ssh cat id_rsa.pub ssh-copy-id yourUsername@192.168.0.50 On VPS check that your key file is in place and display it: cd cd .ssh ls -al authorized_keys cat authorized_keys On Mac and on VPS if you look at the two files, the content should be indentical. OR For Windows On Windows (in Command Prompt or PowerShell ), create your SSH public / private key-pair \u2013 accept all the defaults, and enter a secure passphrase: cd /d c:%HOMEPATH% ssh-keygen On VPS create your .ssh directory: cd mkdir .ssh chmod 700 .ssh On Windows display your key file, and copy it to the VPS: cd /d c:%HOMEPATH% type id_rsa.pub scp id_rsa.pub yourUsername@192.168.0.50:/home/yourUsername/.ssh/authorized_keys On VPS check that your key file is in place and display it: cd cd .ssh ls -al authorized_keys cat authorized_keys On Windows and on VPS if you look at the two files, the content should be indentical. On Mac/Windows now connect to your VPS via SSH - this will need your new SSH passphrase: ssh yourUsername@192.168.0.50 On VPS change configuration to disable normal password logins so that only SSH logins are allowed, and also change the SSH port for a little extra security (the port number should be in the range 1025-65535 \u2013 I will use 33333 in my examples) - first back up the SSH config file: sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.myback On VPS edit the SSH config file: sudo nano /etc/ssh/sshd_config On VPS find and change the settings below in that file - if there is a comment character (#) in front of one, you need to remove it for the setting to be able to take effect: Port 33333 PermitRootLogin no MaxAuthTries 3 PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys PasswordAuthentication no PermitEmptyPasswords no AllowAgentForwarding no AllowTcpForwarding no X11Forwarding no On VPS test the SSH configuration file for errors \u2013 fix any that are shown, continue testing and fixing until all clear \u2013 once it reports nothing back, all is good: sudo sshd -t On VPS restart the SSH service for the new configuration to take effect: sudo systemctl restart ssh sudo systemctl status ssh On VPS hit Q or Ctrl + C to terminate the above command (if needed) On Mac/Windows now connect again to your VPS via SSH - this time it will need both the new port number and your SSH passphrase: ssh -p 33333 yourUsername@192.168.0.50 On VPS only If this SSH configuration goes wrong then copy your backup config file back into place and restart the SSH service again: sudo cp /etc/ssh/sshd_config.myback /etc/ssh/sshd_config sudo systemctl restart ssh On VPS hit Q or Ctrl + C to terminate the above command (if needed)","title":"Set Up SSH For Secure Connections"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#update-ubuntu","text":"On VPS update the master package list, then upgrade to all latest listed packages, reboot, and re-connect to your VPS: sudo apt update sudo apt upgrade sudo reboot","title":"Update Ubuntu"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#install-ntp-network-time-protocol","text":"On VPS blockchain nodes are usually incredibly sensitive to time drift so this is critical to configure \u2013 first install the NTP package itself (you may find it is already installed): sudo apt update sudo apt install ntp ntpdate On VPS then stop the NTP service, point it towards a valid NTP server, and restart the service: sudo service ntp stop sudo ntpdate pool.ntp.org sudo service ntp start sudo systemctl status ntp On VPS hit Q or Ctrl + C to terminate the above command (if needed)","title":"Install NTP (Network Time Protocol)"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#install-fail2ban","text":"On VPS Fail2Ban is used to block repeated incoming connection attempts, which are usually a sign of a malicious attack - first install the Fail2Ban package itself: sudo apt update sudo apt install fail2ban sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local On VPS then back up the Fail2Ban config file: sudo cp /etc/fail2ban/jail.local /etc/fail2ban/jail.myback On VPS then edit the Fail2Ban config file: sudo nano /etc/fail2ban/jail.local On VPS replace every line containing \u201c port = ssh \u201d with \u201c port = 33333 \u201d (the port number you defined for SSH earlier) - normally there are 3 such entries: [sshd] port = 33333 logpath = %(sshd_log)s backend = %(sshd_backend)s [dropbear] Port = 33333 logpath = %(dropbear_log)s backend = %(dropbear_backend)s [selinux-ssh] port = 33333 logpath = %(auditd_log)s On VPS then start the Fail2Ban service for this to actually take effect: sudo systemctl enable fail2ban sudo service fail2ban start sudo systemctl status fail2ban On VPS hit Q or Ctrl + C to terminate the above command (if needed) On VPS only If this Fail2Ban configuration goes wrong then copy your backup config file back into place and stop the Fail2Ban service: sudo cp /etc/fail2ban/jail.myback /etc/fail2ban/jail.local sudo service fail2ban stop sudo systemctl status fail2ban On VPS hit Q or Ctrl + C to terminate the above command (if needed)","title":"Install Fail2Ban"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#set-up-the-firewall","text":"On VPS the Uncomplicated Firewall (UFW) is used to stop / block incoming potentially malicious traffic - as a baseline block all the incoming ports, then allow traffic on specific ports for SSH (ports 22, 33333), VNC (port 5900), and Webmin (port 10000) connections: sudo ufw disable sudo ufw default deny incoming sudo ufw default allow outgoing sudo ufw allow 22 sudo ufw allow 33333 sudo ufw allow 5900 sudo ufw allow 10000 On VPS re-enable the firewall and firewall logging and check the firewall status: sudo ufw logging on sudo ufw enable sudo ufw status On VPS my output from that last command looks like this: Note: you can ignore port 80 in the above for now - this is because I have that port open for something else","title":"Set Up The Firewall"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#install-webmin","text":"On VPS Webmin is an excellent web-based administration and monitoring tool - first install the packages and certificates required for installing Webmin, and add the Webmin repository: sudo apt update sudo apt install gpg-agent apt-transport-https software-properties-common wget -qO - http://www.webmin.com/jcameron-key.asc | sudo apt-key add Note: in the \"wget\" command above, that is a capital letter O, not a zero sudo add-apt-repository \"deb [arch=amd64] http://download.webmin.com/download/repository sarge contrib\" On VPS update the package repository, then install the Webmin package itself, and check it is running (it normally starts automatically after installation): sudo apt update sudo apt install webmin sudo systemctl status webmin On VPS hit Ctrl + C to terminate the above command (if needed) On VPS on Ubuntu 21.04 onwards Webmin is started a different way: sudo /etc/init.d/webmin restart On Mac/Windows to access Webmin, open your browser and enter this URL ( yourHost.yourProvider.com is your VPS' fully-qualified domain name, 10000 is the default Webmin port): https://yourHostname.yourProvider.com:10000 Or you can use the VPS IP address instead: https:// 192.168.0.50:10000 On Mac/Windows login with your non-root user and password \u2013 if you need some help with Webmin, you can find that here: https://www.webmin.com/docs.html https://www.webmin.com/faq.html On Mac/Windows as you can see below, I need to do some updating !","title":"Install Webmin"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#install-docker-docker-compose","text":"On VPS Docker is a container technology used to run software such as the Partisia node in a secure pre-configured environment \u2013 first install the packages and certificates required for installing Docker, and add the Docker repository: sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null On VPS update the package repository, then install the Docker package itself: sudo apt update sudo apt install docker-ce docker-ce-cli containerd.io On VPS install the Docker Compose package, then ensure it is executable, and reachable from the normal directory: sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose On VPS add the docker group (it may already be added - in which case ignore the error), then add your non-root user to that group: sudo groupadd docker sudo usermod -aG docker yourUsername On VPS now log out and re-connect to your VPS for the above to take effect, then check your groups and test the docker installations: docker run hello-world docker-compose -version On VPS my output from those last three commands looks like this:","title":"Install Docker &amp; Docker-Compose"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#install-mail-utilities","text":"On VPS it\u2019s potentially very useful to be able to be able to send emails for warnings etc \u2013 first install the mailutils package itself: sudo apt update sudo apt install mailutils sendmail On VPS with pre-20.xx versions of Ubuntu you will get a pop-up screen asking you to select the General type of mail configuration - select Internet Site and hit Return: You will then be asked to enter your System mail name \u2013 just accept the default and hit Return: On VPS test the installation by sending a mail - this should result in an email being sent to your email address, the content being that of the /etc/shells file from your VPS: mail -s \"testing my VPS\" yourEmailAddress < /etc/shells Note: some VPS providers do not allow email to be sent in the first 24 hours after a VPS is ordered, or in some cases you must contact the VPS Support team to request to be able to send emails - this is part of their process to stop spammers - means you may need to re-test this depending on your VPS provider","title":"Install Mail Utilities"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#install-bashtop","text":"On VPS Bashtop is an excellent top alternative for checking system resources \u2013 first install the packages and certificates required for installing Bashtop: wget -qO - https://azlux.fr/repo.gpg.key | sudo apt-key add Note: in the \"wget\" command above, that is a capital letter O, not a zero echo \"deb http://packages.azlux.fr/debian/ buster main\" | sudo tee /etc/apt/sources.list.d/azlux.list On VPS update the package repository, then install the Bashtop package itself and run it: sudo apt update sudo apt install bashtop bashtop On VPS my Bashtop output looks like this:","title":"Install Bashtop"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#appendix-a-vps-maintenance-critical","text":"I\u2019m not going to add much here \u2013 main thing to do is to ensure your Ubuntu packages are up to date \u2013 I would strongly advise you do this on a regular basis, perhaps schedule a regular 30-minute slot every week or two. There are two main ways to do this: On Mac/Windows via WebMin on the main dashboard page it will tell you how many packages are out of date, click on that list and it\u2019ll take you to an update screen On VPS via the command line \u2013 you may or may not need to reboot (usually only if there is a kernel update) keep an eye out on your disk space usage, especially if you are renting a VPS with a relatively small SSD. Again there are two main ways to do this: On Mac/Windows via WebMin on the main dashboard page at the bottom is the Disk Usage section - I would advice to keep this permanently open so you can always see the current usage - my usage looks like this: On VPS you will see a more complex output using the following: df -h On VPS Depending on the disk partition layout you have, you need to watch out for \"/\" (the root filesystem) and possibly also \"/boot\" (if you only have that as a separate partition) - my usage looks like this:","title":"Appendix A - VPS Maintenance (Critical !!!)"},{"location":"PitBullCH-Secure_VPS_Setup_for_Blockchain/PitBullCH-Secure_VPS_Setup_for_Blockchain/#appendix-b-vps-control-from-a-secondary-device","text":"If you want to be able to control your VPS from a secondary device (Mac or Windows PC) in case of issues with your primary device, or maybe because you are travelling with a secondary device, you first need to set up access for that device. Now assuming you already set up access from your primary Mac/Windows desktop #1, and because you might be travelling, you also want to set up access from your secondary Mac/Windows laptop #2. On Mac/Windows #1 as a safety precaution, open 2 connections from your primary device to your VPS On Mac/Windows #2 generate the new key pair (see section 6 of this guide) On Mac/Windows #2 find the newly generated public key file - it should be in the .ssh directory under your home directory, and will be called id_rsa.pub On Mac/Windows #2 you now need to get the contents of that file from your secondary device to the VPS Easiest way is to copy it to a USB stick on the secondary device, then insert the USB stick into the primary device Other options including emailing it to yourself on your primary device, or copying it from the secondary device to a NAS or Dropbox account (if you have one) then copying from the NAS/Dropbox account to the primary device - but the USB stick is easiest On Mac/Windows #1 find the newly copied public key file and open it in a text editor ( TextEdit on Mac, Textpad or Wordpad on Windows), highlight and copy the file contents into your copy/paste buffer ( Cmd + C on Mac, Ctrl + C on Windows) On VPS via one of the connections opened in step #1 (above), edit the authorized_keys file: cd cd .ssh nano authorized_keys On VPS go to the end of the file, paste ( Cmd + V on Mac, Ctrl + V on Windows) your copy/paste buffer contents into the file, write and quit - then review the file to ensure it is correct - you should now see that new line at the end: cat authorized_keys On Mac/Windows #2 test a new connection to the VPS and ensure that it works ssh yourUsername2@192.168.0.50 Note that you might be using a different username on the secondary device to the one you are using on the primary device - if you are not sure, look at the line you just added to the authorized_keys file on the VPS, the last part of the line will be username2@hostname where username2 will be the username on that secondary device - that is what you use in the ssh command","title":"Appendix B - VPS Control From A Secondary Device"}]}